name: Docker Build & Deploy

on:
  push:
    branches: [ main ]

env:
  REGISTRY: registry.cn-hangzhou.aliyuncs.com
  REPO: sinrpc/ai-wallet
  SSH_HOST: 120.26.250.150
  SSH_USER: root

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 拉取代码
      - uses: actions/checkout@v4

      # 2. 生成动态标签 (年月日时分秒)
      - name: Generate tag
        id: tag
        run: echo "TAG=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      # 3. **手动创建 Docker 登录凭据文件**
      - name: Manually Create Docker Config
        run: |
          mkdir -p ~/.docker
          echo '{
            "auths": {
              "${{ env.REGISTRY }}": {
                "auth": "'$(echo -n "986244259@qq.com:${{ secrets.ACR_PASSWORD }}" | base64)'"
              }
            }
          }' > ~/.docker/config.json
          chmod 600 ~/.docker/config.json

      # 4. 构建镜像 (带时间戳和 latest 双标签)
      - name: Build image
        run: |
          docker build . \
            --tag ${{ env.REGISTRY }}/${{ env.REPO }}:${{ env.TAG }} \
            --tag ${{ env.REGISTRY }}/${{ env.REPO }}:latest \
            --progress plain

      # 5. 推送镜像
      - name: Push image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.REPO }}:${{ env.TAG }}
          docker push ${{ env.REGISTRY }}/${{ env.REPO }}:latest

      # 6. 部署到服务器 (SSH)
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            echo "=== Starting Deployment ==="

            # **服务器上手动创建 Docker 登录凭据**
            mkdir -p ~/.docker
            echo '{
              "auths": {
                "${{ env.REGISTRY }}": {
                  "auth": "'$(echo -n "986244259@qq.com:${{ secrets.ACR_PASSWORD }}" | base64)'"
                }
              }
            }' > ~/.docker/config.json
            chmod 600 ~/.docker/config.json

            # 拉取新镜像
            docker pull ${{ env.REGISTRY }}/${{ env.REPO }}:${{ env.TAG }}

            # 停止并移除旧容器
            docker-compose down --remove-orphans

            # 启动新容器
            docker-compose up -d

            # 清理旧镜像 (保留最近3天的镜像)
            docker image prune -af --filter "until=72h"

            echo "=== Deployment Complete ==="
